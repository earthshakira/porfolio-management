swagger: "2.0"
info:
  title: "Portfolio Management"
  contact:
    name: "Shubham Arawkar"
    email: "shubham.s.arawkar@gmail.com"
  version: "1.0.0"
  description: "Backend Assignment in Swagger"
host: "shubham-ar-portfolio-mgmt.herokuapp.com"
tags:
- name: "user"
  description: "Basic User Creation for Basic Authentication to Work"
- name: "trade"
  description: "The operations related to trading"
- name: "portfolio"
  description: "Everything about your Portfolio"

schemes:
- "https"
- "http"


paths:
  /portfolio:
    get:
      tags:
      - "portfolio"
      summary: "Get the portfolio for the logged in User"
      security:
      - basicAuth: []
      produces:
      - "application/json"
      responses:
        "200":
          description: "successful operation"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/Security"
        "404":
          description: "Not found"
  /returns:
    get:
      tags:
      - "portfolio"
      summary: "Get the cumilative returns for the logged in User"
      security:
      - basicAuth: []
      responses:
        "200":
          description: "successful operation"
          schema:
            type: "object"
            properties:
              returns:
                type: "number"
                format: "float"
        "404":
          description: "Not found"
  /trade:
    post:
      tags:
      - "trade"
      summary: "Place a trade for a security"
      security:
      - basicAuth: []
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "Payload of the trade to be done"
        required: true
        schema:
          $ref: "#/definitions/TradePayload"
        example:
          tickerSymbol: TCS
          price: 100
          quantity: 20
          tradeType: BUY
      responses:
        "200":
          description: "successful operation"
          schema:
            $ref: "#/definitions/Trade"
        "400":
          description: "Invalid Order"
    get:
      tags:
      - "trade"
      summary: "Get the list of trades security wise"
      security:
      - basicAuth: []
      produces:
      - "application/json"
      responses:
        "200":
          description: "successful operation"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/SecurityWiseTrades"
        "400":
          description: "Invalid ID supplied"
        "404":
          description: "Order not found"
  /trade/{orderId}:
    put:
      tags:
      - "trade"
      summary: "Modify trade by ID"
      description: "For valid response try integer IDs with positive integer value.         Negative or non-integer values will generate API errors"
      security:
      - basicAuth: []
      produces:
      - "application/json"
      parameters:
      - name: "orderId"
        in: "path"
        description: "ID of the trade that needs to be modified"
        required: true
        type: "integer"
        minimum: 1.0
        format: "int64"
      - in: "body"
        name: "body"
        description: "Trade placed"
        required: true
        schema:
          $ref: "#/definitions/TradePayload"
      responses:
        "200":
          description: "Trade Updated Success Fully"
          schema:
            $ref: "#/definitions/Trade"
        "400":
          description: "Invalid ID supplied"
        "404":
          description: "Trade not Found"
    delete:
      tags:
      - "trade"
      summary: "Delete "
      security:
      - basicAuth: []
      produces:
      - "application/json"
      parameters:
      - name: "orderId"
        in: "path"
        description: "ID of the trade that needs to be deleted"
        required: true
        type: "integer"
        minimum: 1.0
        format: "int64"
      responses:
        "400":
          description: "Invalid ID supplied"
        "404":
          description: "Trade not found"
  /user/:
    post:
      tags:
      - "user"
      summary: "Create user"
      description: "This can only be done by the logged in user."
      operationId: "createUser"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "Created user object"
        required: true
        schema:
          $ref: "#/definitions/User"
      responses:
        default:
          description: "successful operation"
securityDefinitions:
  basicAuth:
    type: basic
definitions:
  TradePayload:
    type: "object"
    properties:
      tickerSymbol:
        type: "string"
      price:
        type: "number"
        format: "float"
      quantity:
        type: "integer"
        format: "int32"
      tradeType:
        type: "string"
        description: "TradeType"
        enum: [BUY, SELL]
  Trade:
    type: "object"
    allOf:
    - $ref: '#/definitions/TradePayload'
    - type: "object"
      properties:
        id:
          type: "string"
  Security:
    type: "object"
    properties:
      symbol:
        type: "string"
      shares:
        type: "number"
      price:
        type: "number"
        format: "float"
  
  SecurityWiseTrades:
    allOf:
      - $ref: '#/definitions/Security'
      - type: "object"
    type: "object"
    properties:
      trades:
        type: array
        items:
         $ref: "#/definitions/Trade"
      
  User:
    type: "object"
    properties:
      username:
        type: "string"
      password:
        type: "string"
    xml:
      name: "User"
externalDocs:
  description: "Implementation Documentation"
  url: "https://earthshakira.github.io/portfolio-management/"